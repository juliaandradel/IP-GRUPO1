import pygame as pg
from pygame.locals import *
from sys import exit
import math



class Jogador:
    def __init__(self, window, x, y, largura, altura, cor, velocidade, cima, baixo, esquerda, direita):
        self.window = window
        self.x = x
        self.y = y
        self.largura = largura
        self.altura = altura
        self.cor = cor
        self.velocidade = velocidade
        self.cima = cima
        self.baixo = baixo
        self.esquerda = esquerda
        self.direita = direita
        self.vida = 3
        self.rect = pg.Rect(self.x, self.y, self.largura, self.altura)
        self.trofeus = 0
        self.velocidade_original = velocidade
        self.energetico_ativo = False
        self.tempo_inicio = 0

    # agora, vamos criar os métodos para o player(movimentação, draw, etc)
    def movimentacao(self):
        keys = pg.key.get_pressed()
        if keys[self.cima]:
            self.y += self.velocidade
        if keys[self.baixo]:
            self.y -= self.velocidade
        if keys[self.esquerda]:
            self.x += self.velocidade
        if keys[self.direita]:
            self.x -= self.velocidade

    def tomar_dano(self):
        self.vida -= 1

    def recuperar_vida(self):
        if self.vida < 3:
            self.vida += 1

    def tomar_energetico(self):
        if self.velocidade < 10:
            self.velocidade += 2
            self.energetico_ativo = True
            self.tempo_inicio = pg.time.get_ticks()


    def coletar_trofeu(self):
        self.trofeus += 1

    def update(self):
        pg.draw.rect(self.window, self.cor, (self.x, self.y, self.largura, self.altura))
        self.rect = pg.Rect(self.x, self.y, self.largura, self.altura)
        if pg.time.get_ticks() - self.tempo_inicio >= 10000:  # 10000 ms = 10 segundos
            self.velocidade = self.velocidade_original  # Restaura a velocidade original
            self.energetico_ativo = False  # Desativa o efeito do energético


    def interface(self):
        fonte = pg.font.SysFont('pixel', 35, bold=False, italic=True)
        mostrar_vida = fonte.render(f'Vida: {self.vida}', True, ('WHITE'))
        mostrar_trofeu = fonte.render(f'Troféus: {self.trofeus}', True, ('WHITE'))
        self.window.blit(mostrar_vida, (10, 10))
        self.window.blit(mostrar_trofeu, (10, 50))


class Tiro_Jogador:
    def __init__(self, x, y, mouse_x, mouse_y):
        self.x = x
        self.y = y
        self.mouse_x = mouse_x
        self.mouse_y = mouse_y
        self.speed = 6
        self.angle = math.atan2(y - mouse_y, x - mouse_x)
        self.x_vel = math.cos(self.angle) * self.speed
        self.y_vel = math.sin(self.angle) * self.speed

    def update(self, display):
        self.x -= int(self.x_vel)
        self.y -= int(self.y_vel)
        pg.draw.circle(display, (0, 0, 0), (self.x, self.y), 5)
